subexpression ordering in the execution of arithmetic expressions.wan arithmetic expression can often be brokendown into its component subexpressions.  depending on the hardware environment in which the expression isto be executed, these subexpressions can be evaluated in serials, in parallel, or in a combination of thesemodes.  this paper shows that expression execution time can be minimized only if consideration is given tothe ordering of the subexpressions.  in particular, subexpressions should be executed in order of decreasingmemory and processor time requirements.  this observation is valid for configurations ranging froma uniprocessor with an unbuffered main memory to multiprocessor with a "cache" buffer memory.  if thenumber of subexpressions which can be executed in parallel exceeds the number of available processors,then execution of some of these subexpressions must be postponed.  a procedure is given which combines thisrequirement with the earlier ordering considerations to provide an optimal execution sequence.cacm july, ramamoorthy, c. v.gonzalez, m. j..kparallel processing, cache, arithmetic expressions,subexpression ordering, computational trees, compilers.c. .ca jb february ,   : pm