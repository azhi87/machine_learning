proving the correctness of heuristically optimized code .wa system for proving that programs writtenin a high level language are correctly translated to a low level language is described.  a primary use ofthe system is as a post optimization step in code generation.  the low level language programs need notbe generated by a compiler and in fact could be hand coded.  examples of the usefulness of such a systemare given.  some interesting results are the ability to handle programs that implement recursion bybypassing the start of the program, and the detection and pinpointing of a wide class of errors in the lowlevel language programs.  the examples demonstrate that optimization of the genre of this paper can resultin substantially faster operation and the saving of memory in terms of program and stack sizes.cacm july, samet, h..kcompilers, correctness, code optimization,debugging, program verification, lisp.c. . . .ca dh february ,   : pm