list processing in real time on a serial computer.wa real-time list processing system is onein which the time required by the elementary list operations (e.g. cons, car, cdr, rplaca, replacd, eq,and atom in lisp) is bounded by a (small) constant.  classical implementations of list processing systemslack this property because allocating a list cell from the heap may cause a garbage collection, which processrequires time proportional to the heap size to finish.  a real-time list processing system is presentedwhich continuously reclaims garbage, including directed cycles, while linearizing and compacting theaccessible cells into contiguous locations to avoid fragmenting the free storage pool.  the program is smalland requires no time-sharing interrupts, making it suitable for microcode.  finally, the system requiresthe same average time, and not more than twice the space, of a classical implementation, and thosespace requirements can be reduced to approximately classical proportions by compact list representation. arrays of different sizes, a program stack, and hash linking are simple extensions to our system, andreference counting is found to be inferior for many applications.cacm april, baker, h.g..kreal-time, compacting,garbage collection, list processing,virtual memory, file or database management, storage management, storage allocation, lisp, cdr-coding, reference counting.  .c. . . . . . . . . .ca dh february ,  : pm